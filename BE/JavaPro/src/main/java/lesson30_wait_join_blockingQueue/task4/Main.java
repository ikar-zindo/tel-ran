package lesson30_wait_join_blockingQueue.task4;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

/**
   1. Написать класс Сообщение.
   2. Сообщение должно содержать текст сообщения, идентификатор и иметь конструктор
   и геттеры для текста сообщения и идентификатора.
   3. Написать класс Производитель (должен уметь запускаться в отдельном потоке).
   4. У данного класса должно быть поле, содержащее очередь - BlockingQueue<Message> queue,
   а также конструктор, принимающий эту очередь.
   5. Производитель выполняет следующие действия:
     а. Создаёт 35 сообщений, содержащих номер сообщения, идентификатор (равный номеру),
     и добавляет эти сообщения в очередь с интервалом (ИД сообщения * 200 миллисекунд).
     б. Информацию о каждом добавленном сообщении выводит в консоль.
     в. После каждого добавления выводит в консоль размер очереди.
     г. В конце добавляет в очередь сообщение с текстом "exit".
     д. Завершает работу.
   6. Написать класс Потребитель (должен уметь запускаться в отдельном потоке).
   7. У данного класса должно быть поле, содержащее очередь - BlockingQueue<Message> queue,
   а также конструктор, принимающий эту очередь.
   8. Потребитель выполняет следующие действия:
     а. С момента старта ожидает 7 секунд.
     б. Запускает цикл, который работает до тех пор, пока не придёт сообщение "exit".
     в. Внутри цикла забирает сообщения из очереди с интервалом (ИД сообщения * 500 миллисекунд).
     г. Выводит информацию о полученном сообщении в консоль.
     д. При получении сообщения "exit" завершает работу.
   9. В главном методе создать ArrayBlockingQueue размером 10.
   10. Создать объекты производителя и потребителя, передав им эту очередь.
   11. Запустить производителя и потребителя в разных потоках.
   12. Проанализировать вывод в консоль.
   */
public class Main {
      public static void main(String[] args) {

         BlockingQueue<Message> queue = new ArrayBlockingQueue<>(10);

         Producer producer = new Producer(queue);
         Consumer consumer = new Consumer(queue);

         producer.start();
         consumer.start();
      }
}
