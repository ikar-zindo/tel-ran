Текстовые редакторы


Итак, текстовые редакторы. Как мы помним, все файлы в ОС Linux являются текстовыми, а это значит, что одна из первых программ для удобной работы была текстовым редактором. История текстовых редакторов уходит в семидесятые, когда появился Vi - или виай по-русски.
Чем он крут?
 Редактор vi – один из старейших и мощнейших редакторов в Linux. Он работает даже на таких аппаратных терминалах как VT100 и XTERM. Современный вариант этого редактора называется vim (Vi IMproved – улучшенный vi). vim эмулирует все команды vi,и в то же время добавляет много дополнительных возможностей, таких как:
- многоуровневый процесс отмены ранее выполненных действий ( undo );
- использование нескольких окон редактирования;
- редактирование командной строки;
- встроенная справочная система (команда :help ) и многое другое.

Сейчас не найдется ни одного дистрибутива, чтобы там не было редактора Vi. Ведь рано или поздно пользователь столкнется с проблемой, чтобы зайти в текстовый файл и сделать там правки.
Шпаргалка:
●	ZZ (Note: capitals) - Save and exit
●	:q! - discard all changes, since the last save, and exit
●	:w - save file but don't exit
●	:wq - again, save and exit
●	:x - again, save and exit
●	G  (shift g) - move to the last line
●	/ - search (n - next) 
●	i - insert text, edit mode. ECS to exit 
●	u - undo last action
●	dd - delete the current line ( i mode not needed) 
●	Del - delete single character ( i mode not needed)   



Давайте создадим файл.
В линуксе, при создании файлов случается так, что мы указываем, что хотим создать файл, указываем, каким редактором будем пользоваться, но файл будет создан и сохранен только когда мы выйдем из редактора с сохранением.
vi /tmp/file

И перед нами - интерфейс! Представьте, как раньше (а теперь и мы), страдали. Вот так он страшно выглядит. Но только на первый взгляд.
 В сравнении с каким-нибудь MS Office полное дно. 
Кстати! Забыл сказать, что такое Vi - Vi - это visual! Визуальный, блин. 

Что же мы видим. Пустой экран редактора. Он занимает всю площадь нашего экрана. И тут есть тильды. Они видны только нам и указывают на то, что это пустые строки. На самом деле тильд нету и если мы вдруг захотим распечатать что-то, то там будет пусто.

А в самом низу мы видим имя и путь к файлу и что курсор находится на первой строке из всех строк и это 100% от всего документа. То Есть документ новый и чистый.
 
А теперь давайте присмотримся к левому нижнему углу. Особо зоркие могут заметить еще один символ, который как и кавычки в Linux, можно спутать с другим. Это не тильда, это минус.
 Он нам говорит, что мы находимся в командном режиме (и о боже, в нашем интерфейсе). Еще некоторые его называют режимом просмотра.
Когда мы видим такой символ, это означает, что Vi ждет от нас команд, либо мы просто зашли сюда поглазеть на документ.
 Но что же делать, если мы хотим что-то дописать? И тут начинаются очередные сложности, к которым я думаю вы уже привыкаете, используя Linux. 
 Нам необходимо перейти в другой режим.
Перейти в другой режим мы можем клавишей I. Теперь присмотримся к нашему левому нижнему углу. Что видим? Букву i. Это сокращение от insert. Значит, мы находимся в режиме ввода и редактирования. И мы можем написать какой-то текст:
hello from tel ran
 
 
 
 
 
 
 
end
~

мы можем надобавлять каких-либо строчек и написать что угодно.
Стоит сказать, что бывают и русскоязычные дистрибутивы, где вместо буквы I будет написано ВСТАВКА. Выглядит забавно. 
 В более продвинутых версиях может быть написано Insert.

Теперь давайте попробуем выйти из редактора с сохранением. Как видно в подсказке, это две заглавные буквы ZZ. Иногда в терминале это может не срабатывать с первого раза, как у меня на прошлом занятии. Но ничего.
 Кстати, вопрос “Как выйти из редактора Vi” с сохранением или без, является одним из самых топовых в среде Linux до сих пор на протяжении многих десятков лет.
А чтобы прочесть один из самых простых мануалов по среде Vi, нам понадобится куча времени, ведь книжка занимает 570 страниц.
Но нам, как пользователям, понадобится лишь наша шпаргалка, которая удовлетворяет потребности в работе.
Едем дальше.
 Для того, чтобы сохранить и выйти (надеюсь терминал не будет адово тормозить из моей страны), нам нужно выйти из режима редактирования. Давайте еще раз присмотримся к левому нижнему углу. Там буква I. Теперь нажмем на esc.
Теперь буква i заменилась на тире. А это означает, что мы вышли из режима ввода в режим команд (или режим просмотра).
Теперь нужно выйти непосредственно из редактора. С сохранением. Я покажу вам целых три способа для выхода. Но вам все три не нужны, главное запомнить один, который больше понравится.
:x :wq ZZ 

Это три варианта выхода с сохранением.
Воспользуемся одним из способов. И что мы видим? Что из Vi мы благополучно вышли и система ждет наших команд.
Вы можете спросить, а если мне не нужно делать сохранение? Что же делать и как быть? Для этого нужно нажать:
 :q!
Едем дальше.
 Теперь мы можем посмотреть чуть глубже в режим команд и давайте я покажу, как в этом режиме удалять строки.
Все просто, для этого есть команда dd.
Но если вдруг вы удалили лишнего - есть клавиша U - undo.
Давайте выйдем из редактора и нажмем ctrl+l (или команду clear), чтобы не видеть остатки от редактора в нашем терминале.
Давайте проверим че мы там поназаписывали:
cat /tmp/file

Это был Vi. Он есть везде. 

 А теперь давайте шагнем вперед на целых 20 лет и посмотрим, что же разработчики выдали хорошего.

Редактор Nano. 
Единственным минусом, который можно назвать, является его отсутствие на некоторых дистрибутивах. Несмотря на очень маленький размер - около 20 килобайт, некоторые разработчики, делая дистрибутив экономят даже на этом. И не включают этот редактор в стандартный пакет.
Давайте запустим:
nano /tmp/file
И что мы видим? Интерфейс, который уже хоть на что-то похож.

Сверху мы видим название файла. Уже прекрасно. Мы сразу находимся в режиме редактирования и можем дописать, отписать, убрать и прочее.
И никаких тильд в пустом пространстве, которые бесят и пытаются сбить с толку.
 Дальше, если мы вдруг забыли как нам отсюда выходить или что-то сделать, то тут мы сможем увидеть подсказки, которых нам так не хватало в Vi.
 Вот, смотрите, чтобы выйти нужно нажать ctrl+x. Вот эта крышечка - это ctrl.
Давайте введем текст и попробуем выйти.
 Смотрите - 20 лет прошли не зря!
У нас при выходе спрашивают, хотим ли мы сохранить файл и далее, хотим ли мы переименовать наш файл. Магия!
Как по мне, так более хороший подход и пользоваться попроще.
Теперь давайте внесем изменения в наш файл при помощи nano.
nano /tmp/file
У всех получилось?
Давайте сохраним и выйдем.


Супер, двигаемся дальше.
 Вы уже наверняка что-то программировали и знаете что такое переменные.
Переменная простыми словами — это хранилище данных. Сюда можно положить какое-то значение (например, число, строку или другой тип данных).
Давайте поговорим, как в ОС Linux работают переменные. Есть много интересных моментов.

В Linux есть одна переменная, которая влияет на запуск всех программ в системе. 
В этой ОС переменные принято (это не значит, что не заработает, это очередное джентльменское соглашение), писать большими буквами (капсом).

Давайте для начала посмотрим на команду env, которая вернет нам все объявленные переменные в нашей ОС.
localhost:~/test1# env
SHLVL=3
HOME=/root
OLDPWD=/root
PAGER=less
PS1=\h:\w\$
TERM=linux
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
PWD=/root/test1
TZ=UTC-03:00

 
PATH - путь.
Вы наверняка заметили, что когда мы запускаем команду, то она запускается из любого места в системе. 
например команда ls выполнилась из любого места. 
Как это работает и какая логика?
Сначала система пытается найти файл в папке (где мы находимся) с именем нашей команды. Но не находит. Затем ОС обращается к переменной PATH, где перечислены возможные локации,где может лежать исполняемый файл.
Причем эти локации перечислены через двоеточие.
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
Логически доходит до /usr/bin  и там находит исполняемый файл для команды ls.

 Как это может нам пригодиться? Например, мы написали программу vasya. И хотим ее запускать, как мы запускаем редактор nano. Прямо из командной строки. Но когда мы вводим название программы  - мы видим, что система не понимает, что и откуда нужно запускать. Тут нам и поможет наш PATH. Мы делаем еще один путь, где ОС будет искать путь исполнения для нашей программы vasya. И запускать ее оттуда. Более того, как только мы задействуем PATH, то будем использовать и ТАБ для поиска и подсказки в названии нашей программы (как мы пользуемся подсказками по командам и папкам).
С этим, вы, возможно, столкнетесь.
А если пойдете на тестировщика, то столкнетесь 100%.


https://habr.com/ru/articles/307084/

https://habr.com/ru/articles/511366/