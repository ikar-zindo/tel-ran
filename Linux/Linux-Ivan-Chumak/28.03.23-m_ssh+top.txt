Процессы.


Что такое процессы в терминале? 
Любая программа, запущенная в ОС будет процессом. Иногда эти процессы виснут, ведут себя странно и их нужно отслеживать.
 Как же посмотреть список процессов?

Я сейчас зайду на наш учебный сервер:
localhost:~# chmod 744 script.sh  



и введу команду top
top (table of processes) — консольная команда, которая выводит список работающих в системе процессов и информацию о них. По умолчанию она в реальном времени сортирует их по нагрузке на процессор. 
так же мы можем посмотреть количество процессов через команду
ps -ef
Вот значение основных колонок в выводе утилиты:
●	UID - имя пользователя, от имени которого работает процесс;
●	PID - идентификатор пользователя;
●	PPID - идентификатор родительского процесса пользователя;
●	C - расходование ресурсов процессора, в процентах;
●	SZ - размер процесса;
●	RSS - реальный размер процесса в памяти;
●	PSR - ядро процессора, на котором выполняется процесс;
●	STIME - время, когда процесс был запущен;
●	TTY - если процесс привязан к терминалу, то здесь будет выведен его номер;
●	TIME - общее время выполнения процесса (user + system);
●	CMD - команда, которой был запущен процесс, если программа не может прочитать аргументы процесса, он будет выведен в квадратных скобках;
Чтобы посмотреть список процессов в виде дерева, и понимать какой процесс имеет какие дочерние процессы, выполните команду:
ps -efH
Для просмотра списка процессов с потоками используйте опцию -L:
ps -efL
Здесь появятся ещё две дополнительных колонки:
●	LWP - Это сокращение от LightWeight Process. Идентификатор потока;
●	NLWP - количество потоков у этого процесса.
УТИЛИТА TOP

Программа позволяет интерактивно просматривать список запущенных процессов Linux. Чтобы вывести список процессов Linux выполните команду:
top

Колонки, которые выводит программа очень похожи на ps:
●	PID - идентификатор процесса;
●	USER - имя пользователя, от имени которого выполняется процесс;
●	PR - приоритет планировщика, установленный для процесса;
●	NI - рекомендуемый приоритет процесса. Это значение можно менять, может не совпадать с реальным приоритетом планировщика;
●	VIRT - всё, что находится в памяти, используется или зарезервировано для использования;
●	RES - всё, что находится в оперативной памяти и относится к процессу. Расшифровывается как Resident Memory Size, указывается в килобайтах;
●	SHR - часть памяти из RES, которую занимают ресурсы, доступные для использования другим процессам. Расшифровывается - Shared Memory Size.
●	S - состояние процесса: D - ожидает завершения операции, R - запущен, S - спит, T - остановлен, t - остановлен отладчиком, Z - зомби;
●	%CPU - процент использования ресурсов процессора;
●	%MEM - процент использования ресурсов оперативной памяти на основе колонки RES;
●	TIME - общее процессорное время, которое процесс использовал с момента запуска;
●	COMMAND - команда, с помощью которой был запущен процесс.
●	Проце́сс-зо́мби, зо́мби (англ. zombie process, англ. defunct process) — дочерний процесс в Unix-системе, завершивший своё выполнение, но ещё присутствующий в списке процессов операционной системы, чтобы дать родительскому процессу считать код завершения.
Для того чтобы сделать вывод программы цветным, нажмите Z

Чтобы вывести дерево процессов Linux нажмите сочетание клавиш Shift+V:
Для отображения потоков нажмите Shift + H:

Выйдем из TOP нажмем ctrl+z
и введем: 
ps -ef | wc -l
Так мы посмотрим сколько процессов запущено в цифрах.
И мы можем отфильтроваться по слову ssh:
 ps -ef | grep ssh

Тут мы видим наш процесс, который был запущен нашей системой:
root      4744     1  0 Feb01 ?        00:00:03 /usr/sbin/sshd -D

Это значит, что система ожидает, когда к ней подключатся другие пользователи по ssh.
 И мы видим идентификатор. После слова root.

Далее первый процесс запускает второй:
root      4744     1  0 Feb01 ?        00:00:03 /usr/sbin/sshd -D
root     19727  4744  0 12:08 ?        00:00:00 sshd: ec2-user [priv]

И тут мы видим, что идентификаторы процесса совпадают.

Итак. Теперь о наших процессах. Если мы сами что-то запускаем на сервере и мы не является администраторами, то мы можем завершать процессы командой kill



